{"version":3,"sources":["scripts/main.js"],"names":["board","startButton","document","querySelector","gameField","gameScore","messageLose","messageWin","messageStart","columns","rows","score","filterZero","row","filter","num","compareFields","prevBoard","currentBoard","i","j","slide","currentRow","length","splice","push","hasEmptyCell","r","c","renderField","cell","cells","className","textContent","setRandomCell","found","Math","floor","random","transposeField","currentField","map","_","colIndex","slideLeft","transposedField","slideRight","reverse","slideDown","newField","slideUp","winGame","checkFields","fieldToCheck","gameOver","boardToCheck","newDesk","deepCloneBoard","newBoard","addEventListener","classList","toggle","innerText","add","Array","from","fill","e","remove","key"],"mappings":"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","file":"main.93bc18a0.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.button');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\n\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nlet board;\nconst columns = 4;\nconst rows = 4;\nlet score = 0;\n\nconst filterZero = (row) => row.filter(num => num !== 0);\n\nfunction compareFields(prevBoard, currentBoard) {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (prevBoard[i][j] !== currentBoard[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction slide(row) {\n  const currentRow = filterZero(row);\n\n  for (let i = 0; i < currentRow.length - 1; i++) {\n    if (currentRow[i] === currentRow[i + 1]) {\n      currentRow[i] *= 2;\n      currentRow.splice(i + 1, 1);\n      score += currentRow[i];\n    }\n  }\n\n  while (currentRow.length < columns) {\n    currentRow.push(0);\n  }\n\n  return currentRow;\n}\n\nconst hasEmptyCell = () => {\n  for (let r = 0; r < columns; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nfunction renderField() {\n  for (let r = 0; r < columns; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = gameField.rows[r].cells[c];\n\n      cell.className = `field-cell field-cell--${board[r][c]}`;\n      cell.textContent = board[r][c] || '';\n    }\n  }\n}\n\nfunction setRandomCell() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * columns);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = 2;\n      renderField();\n      found = true;\n    }\n  }\n}\n\nconst transposeField = (currentField) => currentField[0]\n  .map((_, colIndex) => currentField\n    .map(row => row[colIndex]));\n\nfunction slideLeft(transposedField = board) {\n  for (let r = 0; r < columns; r++) {\n    let row = transposedField[r];\n\n    row = slide(row);\n    transposedField[r] = row;\n  }\n}\n\nfunction slideRight(transposedField = board) {\n  for (let r = 0; r < columns; r++) {\n    let row = transposedField[r].reverse();\n\n    row = slide(row);\n    transposedField[r] = row.reverse();\n  }\n}\n\nfunction slideDown() {\n  const newField = transposeField(board);\n\n  slideRight(newField);\n  board = transposeField(newField);\n}\n\nfunction slideUp() {\n  const newField = transposeField(board);\n\n  slideLeft(newField);\n  board = transposeField(newField);\n}\n\nconst winGame = () => {\n  for (let i = 0; i < board[0].length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkFields = (fieldToCheck) => {\n  for (let i = 0; i < columns; i++) {\n    for (let j = 0; j < columns - 1; j++) {\n      if (fieldToCheck[i][j] === fieldToCheck[i][j + 1]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst gameOver = (boardToCheck) => {\n  if (hasEmptyCell()) {\n    return false;\n  }\n\n  const newDesk = transposeField(boardToCheck);\n\n  if (checkFields(newDesk) || checkFields(boardToCheck)) {\n    return false;\n  }\n\n  return true;\n};\n\nstartButton.addEventListener('click', () => {\n  startButton.classList.toggle('start', false);\n  startButton.classList.toggle('restart', true);\n  startButton.innerText = 'Restart';\n\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  board = Array.from({ length: columns }, () => Array(columns).fill(0));\n\n  score = 0;\n  gameScore.textContent = score;\n\n  setRandomCell();\n  setRandomCell();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (gameOver(board)) {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (winGame()) {\n    messageWin.classList.remove('hidden');\n    renderField();\n  } else {\n    const prevBoard = deepCloneBoard(board);\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        slideLeft();\n        break;\n\n      case 'ArrowRight':\n        slideRight();\n        break;\n\n      case 'ArrowDown':\n        slideDown();\n        break;\n\n      case 'ArrowUp':\n        slideUp();\n        break;\n    }\n\n    if (compareFields(prevBoard, board)) {\n      setRandomCell();\n      renderField();\n    }\n  }\n\n  gameScore.textContent = score;\n});\n\nfunction deepCloneBoard(newBoard) {\n  return newBoard.map(row => [...row]);\n}\n"]}